Introduction
============

Welcome to Picasso.

Please open and run the project in IntelliJ.

Upon execution, you should be greeted with the help menu and a command prompt.

Enter D to see the demo as per the requirements document.
Enter A to see another demo demonstrating a litte more functionality.

Enter ? at anytime to see a list of available commands.

Architecture
============

The application architecture is flexible, it uses Spring Context.
Please see the accompanying diagrams for a high level view. 

Components
----------
Components are the building blocks of the application.

* Main: 			initializes the Context, bootstraps the Application
* Application:  	gets input (InputProcessor) runs commands (CommandManager)
* InputProcessor: 	converts user input into an Input object
* CommandManager: 	identifies commands and executes them
* Renderer: 		outputs to the console
* Canvas:  			the drawing surface

Graphics
--------
Graphics primitives draw upon the Canvas.

* Fill              performs a bucket fill
* Line              draws a line
* Plot              plots a point
* Rectangle         draws a rectangle
* Text              writes text
* Triangle          draws a triangle

Commands
--------
Commands use the primitives to perform user actions (Input).

Each command is annotated with UserCommand. Reflection is used 
by the CommandManager to identify the system commands. This 
decoupling makes it easy to add new commands.

* Command           base of all commands, abstract class
* ...               a number of commands implementing specific behavior

Utils
-----
These are the helper classes.

* Rtti              provides basic package reflection functionality
* UserCommand	    an annotation to declare user commands
* ContextProvider   makes the context available to other classes
* ...               a few simple utility classes

Tests
-----
There are a few tests to verify core functionality.

